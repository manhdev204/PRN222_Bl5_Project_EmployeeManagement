@using System.Globalization
@model PRN222_BL5_Project_EmployeeManagement.Models.Attendance
@{
    // Get working date from record (or today if Model is null)
    var workingDate = Model != null
        ? Model.AttendanceDate.ToDateTime(TimeOnly.MinValue)
        : DateTime.Today;

    // Quick config
    var workStart = new DateTime(workingDate.Year, workingDate.Month, workingDate.Day, 9, 0, 0); // standard start time 09:00
    var targetHours = 8; // target hours/shift
    var now = DateTime.Now;

    bool hasIn = Model?.CheckInTime != null;
    bool hasOut = Model?.CheckOutTime != null;

    TimeSpan worked = TimeSpan.Zero;
    if (hasIn)
    {
        var end = hasOut ? Model!.CheckOutTime!.Value : now;
        if (end > Model!.CheckInTime!.Value) worked = end - Model!.CheckInTime!.Value;
    }
    double progress = Math.Min(100, Math.Max(0, worked.TotalHours / targetHours * 100.0));

    int status = Model?.Status ?? 0; // 0: absent, 1: present, 2: late
    string statusText = Model == null ? "Not checked in" :
                        status == 1 ? "Present" :
                        status == 2 ? "Late" : "Absent";
    string statusBadge = Model == null ? "bg-secondary" :
                         status == 1 ? "bg-success" :
                         status == 2 ? "bg-warning text-dark" : "bg-secondary";

    bool onLeave = (Model?.OnLeave ?? 0) == 1; // OnLeave is INT 0/1
}

<div class="container mt-4">
    @if (TempData["Success"] != null)
    {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle me-2"></i>@TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
    }
    @if (TempData["Error"] != null)
    {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>@TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
    }

    <div class="card shadow border-0 rounded-3">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h3 class="mb-0">Today's Attendance</h3>
                        <small class="opacity-75">
                        @workingDate.ToString("dddd, dd/MM/yyyy", new CultureInfo("en-US"))
                        </small>                
                    </div>
                <span class="badge @statusBadge fs-6 px-3 py-2">
                    <i class="bi bi-activity me-1"></i>@statusText
                </span>
            </div>
        </div>

        <div class="card-body">
            @if (onLeave)
            {
                        <div class="alert alert-info d-flex align-items-center" role="alert">
                            <i class="bi bi-calendar2-check me-2 fs-5"></i>
                            You are on approved leave today. Check-in/Check-out is disabled.
                        </div>
            }

            @if (Model == null)
            {
                        <div class="alert alert-warning text-center mb-4">
                            <i class="bi bi-hourglass-split me-2"></i>You haven't checked in today.
                        </div>
            }

            <div class="row g-3">
                <!-- Clock + quick info -->
                <div class="col-md-4">
                    <div class="card h-100 border-0 bg-light">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <div class="text-muted">System Time</div>
                                    <h4 id="liveClock" class="mb-0">@now.ToString("HH:mm:ss")</h4>
                                </div>
                                <div class="text-end">
                                    <div class="text-muted">Standard Start</div>
                                    <div class="fw-semibold">@workStart.ToString("HH:mm")</div>
                                </div>
                            </div>
                            <hr />
                            <div class="row text-center">
                                <div class="col">
                                    <div class="text-muted">Check-in</div>
                                    <div class="fs-5 fw-semibold">
                                        @(hasIn ? Model!.CheckInTime!.Value.ToString("HH:mm") : "--:--")
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="text-muted">Check-out</div>
                                    <div class="fs-5 fw-semibold">
                                        @(hasOut ? Model!.CheckOutTime!.Value.ToString("HH:mm") : "--:--")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Work progress -->
                <div class="col-md-5">
                    <div class="card h-100 border-0 bg-light">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div class="text-muted">Today's Work Progress</div>
                                <div id="progressSummary" class="small">
                                    <span class="fw-semibold">@worked.Hours</span>h
                                    <span class="fw-semibold">@worked.Minutes</span>m /
                                    <span class="fw-semibold">@targetHours</span>h
                                </div>
                            </div>
                            <div class="progress" style="height: 12px;">
                                <div id="progressBar" class="progress-bar" role="progressbar" style="width: @progress.ToString("0")%"></div>
                            </div>
                            @if (hasIn && !hasOut)
                            {
                                        <div class="small text-muted mt-2">
                                            Calculating in real-time since @Model!.CheckInTime!.Value.ToString("HH:mm").
                                        </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Actions -->
                <div class="col-md-3">
                    <div class="card h-100 border-0 bg-light">
                        <div class="card-body d-flex flex-column justify-content-center gap-2">
                            <form asp-action="CheckIn" method="post" class="d-grid">
                                @Html.AntiForgeryToken()
                                <button type="submit"
                                        class="btn btn-success btn-lg"
                                        title="Record check-in time"
                                @(hasIn || onLeave ? "disabled" : "")
                                        onclick="return confirm('Confirm check-in now?');">
                                    <i class="bi bi-box-arrow-in-right me-1"></i> Check-in
                                </button>
                            </form>
                            <form asp-action="CheckOut" method="post" class="d-grid">
                                @Html.AntiForgeryToken()
                                <button type="submit"
                                        class="btn btn-danger btn-lg"
                                        title="Record check-out time"
                                @((!hasIn || hasOut || onLeave) ? "disabled" : "")
                                        onclick="return confirm('Confirm check-out and end today\'s shift?');">
                                    <i class="bi bi-box-arrow-right me-1"></i> Check-out
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Timeline -->
            <div class="mt-4">
                <div class="card border-0">
                    <div class="card-header bg-white">
                        <div class="d-flex align-items-center gap-2">
                            <i class="bi bi-timeline fs-5"></i>
                            <span class="fw-semibold">Today's Timeline</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex align-items-center">
                                <i class="bi bi-dot fs-3 me-2 text-success"></i>
                                <div>
                                    <div class="fw-semibold">Check-in</div>
                                    <div class="text-muted small">
                                        @(hasIn ? Model!.CheckInTime!.Value.ToString("HH:mm:ss dd/MM") : "Not performed")
                                    </div>
                                </div>
                            </li>
                            <li class="list-group-item d-flex align-items-center">
                                <i class="bi bi-dot fs-3 me-2 text-danger"></i>
                                <div>
                                    <div class="fw-semibold">Check-out</div>
                                    <div class="text-muted small">
                                        @(hasOut ? Model!.CheckOutTime!.Value.ToString("HH:mm:ss dd/MM") : "Not performed")
                                    </div>
                                </div>
                            </li>
                            <li class="list-group-item d-flex align-items-center">
                                <i class="bi bi-dot fs-3 me-2 text-primary"></i>
                                <div>
                                    <div class="fw-semibold">Status</div>
                                    <div class="text-muted small">
                                        @statusText
                                        @if (Model != null && status == 2 && hasIn)
                                        {
                                            var lateMinutes = (int)Math.Max(0, (Model!.CheckInTime!.Value - workStart).TotalMinutes);
                                            if (lateMinutes > 0)
                                            {
                                                                <span class="ms-2 badge bg-warning text-dark">Late by @lateMinutes minutes</span>
                                            }
                                        }
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

        </div>

        <div class="card-footer d-flex justify-content-between align-items-center">
            <div class="small text-muted">
                Note: Late if check-in after @workStart.ToString("HH:mm"). Target @targetHours hours/shift.
            </div>
            <div>
                <a asp-controller="LeaveRequest" asp-action="Create" class="btn btn-outline-primary">
                    <i class="bi bi-calendar-plus me-1"></i> Submit Leave Request
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <script>
        (function () {
            const clockEl = document.getElementById('liveClock');
            const progressSummary = document.getElementById('progressSummary');
            const progressBar = document.getElementById('progressBar');

            const hasIn = @((hasIn && !hasOut).ToString().ToLower());
            const targetHours = @targetHours;

            // Create JS Date from CheckInTime (if available)
        @if (hasIn && !hasOut)
        {
            var ci = Model!.CheckInTime!.Value;
            <text>
                        const checkIn = new Date(@ci.Year, @ci.Month - 1, @ci.Day, @ci.Hour, @ci.Minute, @ci.Second);
            </text>
        }
        else
        {
            <text>const checkIn = null;</text>
        }

            function tick() {
                const now = new Date();
                if (clockEl) clockEl.textContent = now.toLocaleTimeString('en-US');

                if (hasIn && checkIn) {
                    const ms = now - checkIn;
                    if (ms > 0) {
                        const totalMinutes = Math.floor(ms / 60000);
                        const h = Math.floor(totalMinutes / 60);
                        const m = totalMinutes % 60;

                        if (progressSummary)
                            progressSummary.innerHTML = `<span class="fw-semibold">${h}</span>h <span class="fw-semibold">${m}</span>m / <span class="fw-semibold">${targetHours}</span>h`;

                        if (progressBar) {
                            const pct = Math.min(100, Math.max(0, (h + m/60) / targetHours * 100));
                            progressBar.style.width = pct.toFixed(0) + '%';
                        }
                    }
                }
            }
            tick();
            setInterval(tick, 1000);
        })();
        </script>
}
